/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.1
 */

package franka;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class franka_states_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;

    /**
     * LCM Type: double[7]
     */
    public double joint_cmd[];

    /**
     * LCM Type: double[7]
     */
    public double joint_state[];

    /**
     * LCM Type: double[3]
     */
    public double ee_pos_cmd[];

    /**
     * LCM Type: double[4]
     */
    public double ee_quat_cmd[];

    /**
     * LCM Type: double[3]
     */
    public double ee_pos_state[];

    /**
     * LCM Type: double[4]
     */
    public double ee_quat_state[];

 
    public franka_states_t()
    {
        joint_cmd = new double[7];
        joint_state = new double[7];
        ee_pos_cmd = new double[3];
        ee_quat_cmd = new double[4];
        ee_pos_state = new double[3];
        ee_quat_state = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x00a6d9e2a3dd2b94L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(franka.franka_states_t.class))
            return 0L;
 
        classes.add(franka.franka_states_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        for (int a = 0; a < 7; a++) {
            outs.writeDouble(this.joint_cmd[a]); 
        }
 
        for (int a = 0; a < 7; a++) {
            outs.writeDouble(this.joint_state[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.ee_pos_cmd[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.ee_quat_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.ee_pos_state[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.ee_quat_state[a]); 
        }
 
    }
 
    public franka_states_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public franka_states_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static franka.franka_states_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        franka.franka_states_t o = new franka.franka_states_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.joint_cmd = new double[(int) 7];
        for (int a = 0; a < 7; a++) {
            this.joint_cmd[a] = ins.readDouble();
        }
 
        this.joint_state = new double[(int) 7];
        for (int a = 0; a < 7; a++) {
            this.joint_state[a] = ins.readDouble();
        }
 
        this.ee_pos_cmd = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.ee_pos_cmd[a] = ins.readDouble();
        }
 
        this.ee_quat_cmd = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.ee_quat_cmd[a] = ins.readDouble();
        }
 
        this.ee_pos_state = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.ee_pos_state[a] = ins.readDouble();
        }
 
        this.ee_quat_state = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.ee_quat_state[a] = ins.readDouble();
        }
 
    }
 
    public franka.franka_states_t copy()
    {
        franka.franka_states_t outobj = new franka.franka_states_t();
        outobj.timestamp = this.timestamp;
 
        outobj.joint_cmd = new double[(int) 7];
        System.arraycopy(this.joint_cmd, 0, outobj.joint_cmd, 0, 7); 
        outobj.joint_state = new double[(int) 7];
        System.arraycopy(this.joint_state, 0, outobj.joint_state, 0, 7); 
        outobj.ee_pos_cmd = new double[(int) 3];
        System.arraycopy(this.ee_pos_cmd, 0, outobj.ee_pos_cmd, 0, 3); 
        outobj.ee_quat_cmd = new double[(int) 4];
        System.arraycopy(this.ee_quat_cmd, 0, outobj.ee_quat_cmd, 0, 4); 
        outobj.ee_pos_state = new double[(int) 3];
        System.arraycopy(this.ee_pos_state, 0, outobj.ee_pos_state, 0, 3); 
        outobj.ee_quat_state = new double[(int) 4];
        System.arraycopy(this.ee_quat_state, 0, outobj.ee_quat_state, 0, 4); 
        return outobj;
    }
 
}

