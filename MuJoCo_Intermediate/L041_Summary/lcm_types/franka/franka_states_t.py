"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class franka_states_t(object):

    __slots__ = ["timestamp", "joint_cmd", "joint_state", "ee_pos_cmd", "ee_quat_cmd", "ee_pos_state", "ee_quat_state"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, [7], [7], [3], [4], [3], [4]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.joint_cmd = [ 0.0 for dim0 in range(7) ]
        """ LCM Type: double[7] """
        self.joint_state = [ 0.0 for dim0 in range(7) ]
        """ LCM Type: double[7] """
        self.ee_pos_cmd = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.ee_quat_cmd = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: double[4] """
        self.ee_pos_state = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.ee_quat_state = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: double[4] """

    def encode(self):
        buf = BytesIO()
        buf.write(franka_states_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>7d', *self.joint_cmd[:7]))
        buf.write(struct.pack('>7d', *self.joint_state[:7]))
        buf.write(struct.pack('>3d', *self.ee_pos_cmd[:3]))
        buf.write(struct.pack('>4d', *self.ee_quat_cmd[:4]))
        buf.write(struct.pack('>3d', *self.ee_pos_state[:3]))
        buf.write(struct.pack('>4d', *self.ee_quat_state[:4]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != franka_states_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return franka_states_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = franka_states_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.joint_cmd = struct.unpack('>7d', buf.read(56))
        self.joint_state = struct.unpack('>7d', buf.read(56))
        self.ee_pos_cmd = struct.unpack('>3d', buf.read(24))
        self.ee_quat_cmd = struct.unpack('>4d', buf.read(32))
        self.ee_pos_state = struct.unpack('>3d', buf.read(24))
        self.ee_quat_state = struct.unpack('>4d', buf.read(32))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if franka_states_t in parents: return 0
        tmphash = (0xa6d9e2a3dd2b94) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if franka_states_t._packed_fingerprint is None:
            franka_states_t._packed_fingerprint = struct.pack(">Q", franka_states_t._get_hash_recursive([]))
        return franka_states_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", franka_states_t._get_packed_fingerprint())[0]

